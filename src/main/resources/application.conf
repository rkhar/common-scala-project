akka {

  loglevel = INFO
  loglevel = ${?LOG_LEVEL}

  http {

    server {
      idle-timeout = 180s
      request-timeout = 60s
      bind-timeout = 5s
    }

    client {
      connecting-timeout = 15s
      idle-timeout = 600s
    }

    host-connection-pool {
      max-connections = 16
      max-open-requests = 128
      response-entity-subscription-timeout = 60 s
    }
  }
}

http-server {
  port = 8080
  interface = "0.0.0.0"
  ask-timeout = 60s
}

endpoints {
  customer {
    queue-size = 50
    queue-size = ${?CUSTOMER_QUEUE_SIZE}
    url = "http://dev-fintel-customer-core"
    url = ${?CUSTOMER_ENDPOINT}
    prefix = "/api"
    prefix = ${?CUSTOMER_PREFIX}
    hash {
      secretKey = "someKey"
      secretKey = ${?HASH_KEY}
    }
  }

  wallet {
    queue-size = 50
    queue-size = ${?WALLET_QUEUE_SIZE}
    url = "http://localhost:8089"
    url = ${?WALLET_ENDPOINT}
    prefix = "/api"
    prefix = ${?WALLET_PREFIX}
  }

  document {
    queue-size = 50
    queue-size = ${?DOCUMENT_QUEUE_SIZE}
    url = "http://dev-fintel-wallet-core"
    url = ${?DOCUMENT_ENDPOINT}
    docPath = "/root/documents"
    docPath = ${?DOC_PATH}
    prefix = "/api"
    prefix = ${?DOCUMENT_PREFIX}
  }

  zeebe {
    queue-size = 50
    queue-size = ${?ZEEBE_QUEUE_SIZE}
    url = "http://dev-fintel-zeebe-recieve-api.dar-dev.zone/zeebe"
    url = ${?ZEEBE_ENDPOINT}
    prefix = ""
    prefix = ${?ZEEBE_PREFIX}
    process-id {
      delete-profile = "deleteProfile"
      delete-profile = ${?DELETE_PROFILE_PROCESS_ID}
      block-profile = "blockProfile"
      block-profile = ${?BLOCK_PROFILE_PROCESS_ID}
      topup = "topup"
      coinbaseCallbackTopup = "coinbaseCallbackTopup"
      topup = ${?TOPUP_PROCESS_ID}
      withdraw = "withdraw"
      withdraw = ${?WITHDRAW_PROCESS_ID}
      exchange = "exchange"
      exchange = ${?EXCHANGE_PROCESS_ID}
      transfer = "transfer"
      transfer = ${?TRANSFER_PROCESS_ID}
      deposit-open = "deposit-open"
      deposit-open = ${?DEPOSIT_OPEN_PROCESS_ID}
      deposit-withdrawal = "deposit-withdrawal"
      deposit-withdrawal = ${?DEPOSIT_WITHDRAWAL_PROCESS_ID}
      deposit-replenishment = "deposit-replenishment"
      deposit-replenishment = ${?DEPOSIT_REPLENISHMENT_PROCESS_ID}
      deposit-closure = "deposit-closure"
      deposit-closure = ${?DEPOSIT_CLOSURE_PROCESS_ID}
      fintel-exception-handler = "fintel-exception-handler"
      fintel-exception-handler = ${?EXCEPTION_HANDLER_PROCESS_ID}
    }
  }

  notification {
    queue-size = 50
    queue-size = ${?NOTIFICATION_QUEUE_SIZE}
    url = "http://dev-fintel-notifications-gateway"
    url = ${?NOTIFICATION_ENDPOINT}
    prefix = "/api"
    prefix = ${?NOTIFICATION_PREFIX}
  }

  faq {
    queue-size = 50
    queue-size = ${?FAQ_QUEUE_SIZE}
    url = "http://dev-fintel-customer-core"
    url = ${?FAQ_ENDPOINT}
    prefix = "/api"
    prefix = ${?FAQ_PREFIX}
  }

  finance {
    queue-size = 50
    queue-size = ${?FINANCE_QUEUE_SIZE}
    url = "http://localhost:8082"
    url = ${?FINANCE_ENDPOINT}
    prefix = "/api"
    prefix = ${?FINANCE_PREFIX}
  }

  statistics {
    queue-size = 50
    queue-size = ${?STATISTICS_QUEUE_SIZE}
    url = "https://api.binance.com"
    url = ${?STATISTICS_ENDPOINT}
    prefix = "/api"
    prefix = ${?STATISTICS_PREFIX}
    api-key = "5TC9WKTSPO6nNyKFGHsHjwXD5EPtrGERbLxXkzSJZJrtIYb4nX1HofFTMM24IzEL"
    secret-key = "MZiha39dcute34AjUa1A6PSziCxvftUvMf5dJFoQsHpElVTV5hSdNx5NEvoAjvRz"
  }
}

languages = ["kz", "ru", "en", "id", "kk", "in"]

auth {
  method = "GRIFFON" # supported values: MOCK, DAR_ACCOUNT, GRIFFON, DAR_OKTA
  method = ${?AUTH_METHOD}
  jwt.publicKey = ${?AUTH_JWT_PUBLIC_KEY}
  jwt.acl = "ttm.wallet"
  jwt.acl = ${?AUTH_JWT_ACL_KEY}
  test.phone_number = "+70000000001"
  test.phone_number = ${?AUTH_TEST_CUSTOMER}
  isWhiteListAuth = false
  isWhiteListAuth =  ${?WHITELIST_AUTHORIZATION_ENABLED}
  whitelist-authorization {
    ids = "123"
    ids = ${?WHITELIST_AUTHORIZATION_IDS}
  }
}

auth-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

egress-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

swagger {
  json = "src/main/resources/swagger-ui/swagger.json"
  host = "localhost:8080"
  host = ${?SWAGGER_HOST}
  schemes = https
  schemes = ${?SWAGGER_SCHEMES}
  root.path = ""
  root.path =  ${?SWAGGER_ROOT_PATH}
}

redis {
  host = "dev-redis-f5e0c33-001.dev-redis-f5e0c33.2dfdbm.euw1.cache.amazonaws.com"
  host = ${?REDIS_HOST}
  port = 6379
  port = ${?REDIS_PORT}
  token = "1ceQuiqV7PaLSh84"
  token = ${?REDIS_TOKEN}
  24h-ticker-key = "24h-ticker"
  24h-ticker-key = ${?REDIS_24H_TICKER_KEY}
  book-ticker-key = "book-ticker"
  book-ticker-key = ${?REDIS_BOOK_TICKER_KEY}
  database = 1
  database = ${?REDIS_DATABASE}
}

elastic {
  hosts = "10.255.16.29:9200,10.255.16.26:9200,10.255.16.30:9200"
  hosts = ${?ELASTIC_HOSTS}
  indexes {
    crypto-operations = "dev-fintel-accounting-crypto-operations"
    crypto-operations = ${?ELASTIC_CRYPTO_OPERATIONS_INDEX}
  }
}

bank {
  gbp {
    name = "Blockchain BK Limited"
    iban = "GB25TCCL04140452719330"
    bankName = "The Currency Cloud Limited"
    swift = "TCCLGB3L"
    bankAddress = "12 Steward Street, The Steward Building, London, E1 6FQ, United Kingdom"
    sortCode = "041404"
    accountNumber: "52719330"
  }
  eur {
    name = "Blockchain BK Limited"
    iban = "LT783120023810001137"
    bankName = "UAB Paytend Europe"
    swift = "UAPULT22XXX"
    bankAddress = "Pamenkalnio st. 25-1 LT-01113,Vilnius,Lithuania(LT)"
  }
  usd {
    name = "Blockchain BK Limited"
    iban = "GB25TCCL04140452719330"
    bankName = "The Currency Cloud Limited"
    swift = "TCCLGB3L"
    bankAddress = "12 Steward Street, The Steward Building, London, E1 6FQ, United Kingdom"
  }
}

wallet {
  total-currencies = ["GBP", "EUR", "USDT", "BTC"]
}

env = "dev"
env = ${?ENV}
